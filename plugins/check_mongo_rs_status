#!/usr/bin/ruby

require 'rubygems'
require 'mongo'
require 'getoptlong'


# Configurable params
$config = {
  # Mongo params
  :host       => "{{ inventory_hostname }}",
  :port       => 27017,
  :user       => "{{ mongo_adminro_user_real }}",
  :password   => "{{ mongo_adminro_pw_real }}",
  :db         => "admin",
  :collection => "user"
}

tmpOptions = GetoptLong.new(
    ["--verbose", "-v", GetoptLong::NO_ARGUMENT]
)

options = {}
tmpOptions.each do |opt, arg|
    options[opt[2..-1]] = arg.to_s
end

verbose = options["verbose"].nil? ? false : true

def mongo_connect
  con = Mongo::ReplSetConnection.new("#{$config[:host]}:#{$config[:port]}")
  admin_db = con.db("admin")
  admin_db.authenticate($config[:user], $config[:password])
  return admin_db
  #$coll = con.db($config[:db]).collection($config[:collection])
end

  #Do database connect
  begin
    db = mongo_connect
    server_status = db.command('serverStatus' => 1)
    if verbose
      puts "*************************************************************************"
      puts "\t\tServer Status for #{server_status['host']}:"
      puts "\t\t           Process : #{server_status['process']}"
      puts "\t\t            Uptime : #{server_status['uptime']}"
      puts "\t\t          Mem bits : #{server_status['mem']['bits']}"
      puts "\t\t      Mem resident : #{server_status['mem']['resident']}"
      puts "\t\t       Mem virtual : #{server_status['mem']['virtual']}"
      puts "\t\t        Mem mapped : #{server_status['mem']['mapped']}"
      puts "\t\t Mem mappedWiJourn : #{server_status['mem']['mappedWithJournal']}"
  #bits resident virtual supported mapped mappedWithJournal
      puts "*************************************************************************"
      puts
    end
  
    status = db.command('replSetGetStatus' => 1)
    status_messages = []
    hosts_down = ""
    #status["members"].each { |cur| "#{cur["name"]} -> #{cur["health"]}" }
    status["members"].each { |rs_set_member| 
      if rs_set_member["health"] != 1.0
        status_messages << "#{rs_set_member["name"]} Status: #{rs_set_member["health"]}"

        hosts_down += rs_set_member["name"].split(".")[0,2].join(".")
        hosts_down += ", " if status["members"][-1] != rs_set_member 
      end 
    }

    if status_messages.length == 0
      puts "OK: All nodes (total: #{status["members"].length}) are up and healthy"
      exit(0) #SUCCESS.  
    else
      if verbose
         status_messages.each { |msg| puts msg }
      end
      puts "CRITICAL: #{hosts_down} nodes not healthy"
      exit(2) #FAILURE MSG HERE FOR NAGIOS
    end
  rescue => e
    puts "UNKOWN FAILURE: #{e.message}"
    exit(9)
  end

__END__
